#!/usr/bin/env python

from gi.repository import Gtk
from gi.repository import AppIndicator3 as ai

import yaml, sys, os
import os.path as p

CONFIG_FILE = '/etc/sleepr'
SHARE_DIR   = p.realpath(p.join(p.dirname(sys.argv[0]), '..', 'share', 'sleepr'))
UI_FILE     = p.join(SHARE_DIR, 'preferences-window.glade')

class PreferencesWindow:
    def __init__(self):
        self.builder = Gtk.Builder.new()

        try:
            self.builder.add_from_file(UI_FILE)
        except:
            print "Can't load UI"

        self.window = self.builder.get_object("PreferencesWindow")

        self.config = self.load_config()

        self.beginHours   = self.hour_button("spnBeginHours", 'begin')
        self.beginMinutes = self.minute_button("spnBeginMinutes", 'begin')

        self.endHours   = self.hour_button("spnEndHours", 'end')
        self.endMinutes = self.minute_button("spnEndMinutes", 'end')

        self.cancelButton = self.builder.get_object("btnCancel")
        self.cancelButton.connect("clicked", self.__cancel)

        self.okButton = self.builder.get_object("btnOK")
        self.okButton.connect("clicked", self.__ok)


    def build_button(self, name):
        btn = self.builder.get_object(name) 
        btn.set_increments(1, -1)
        btn.set_wrap(True)
        return btn

    def minute_button(self, name, when):
        btn = self.build_button(name)
        btn.set_range(0, 59)
        btn.set_value(self.config[when][1])
        return btn
        
    def hour_button(self, name, when):
        btn = self.build_button(name)
        btn.set_range(0, 23)
        btn.set_value(self.config[when][0])
        return btn


    def show(self):
        self.window.show()

    def load_config(self):
        try:
            f = open(CONFIG_FILE, 'r')
            return yaml.load(f.read())
        except:
            print "Can't read file '%s'" % CONFIG_FILE 

    def save_config(self, config):
        print config
        for k in ['begin', 'end']:
            if config[k]:
                self.config[k] = config[k]

        try:
            f = open(CONFIG_FILE, 'w')
            f.write(yaml.dump(self.config))
        except:
            print "Can't write to file '%s'" % CONFIG_FILE

    def quit(self):
        self.window.hide()

    # callbacks

    def __cancel(self, w):
        self.quit()

    def __ok(self, w):
        self.save_config({
            'begin' : [
                int(self.beginHours.get_value()),
                int(self.beginMinutes.get_value()) ],
            'end' : [
                int(self.endHours.get_value()),
                int(self.endMinutes.get_value()) ] })

        self.quit()

def show_preferences(w):
    PreferencesWindow().show() 

def quit_indicator(w):
    Gtk.main_quit()
    sys.exit(0)


if __name__ == "__main__":
    ind = ai.Indicator.new("sleeper-preferences", "sleepr-indicator-icon", ai.IndicatorCategory.OTHER)

    ind.set_status(ai.IndicatorStatus.ACTIVE)
    ind.set_icon_theme_path(SHARE_DIR)

    menu = Gtk.Menu()
    pref = Gtk.MenuItem("Preferences...")
    pref.connect("activate", show_preferences)

    quit = Gtk.MenuItem("Quit")
    quit.connect("activate", quit_indicator)

    menu.append(pref)
    menu.append(quit)

    pref.show()
    quit.show()
    ind.set_menu(menu)

    Gtk.main()
